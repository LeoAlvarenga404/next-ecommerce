generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id  String  @id @default(uuid())
  email    String  @unique
  name     String?
  password String

  phone String?
  role  UserRole @default(CUSTOMER)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  Order        Order[]
  Cart         Cart?
  UserAddress  UserAddress[]
  RefreshToken RefreshToken[]
}

enum UserRole {
  CUSTOMER
  ADMIN
}

model RefreshToken {
  id         String   @id @default(uuid())
  user_id    String
  token      String   @unique
  created_at DateTime @default(now())
  expires_at DateTime

  user User @relation(fields: [user_id], references: [user_id])
}

model Product {
  product_id  String  @id @default(uuid())
  name        String
  price       Float
  description String?
  stock       Int

  sku String? @unique

  OrderItem   OrderItem[]
  CartItem    CartItem[]
  category_id String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  Category     Category?      @relation("CategoryProducts", fields: [category_id], references: [category_id])
  ProductImage ProductImage[]
}

model ProductImage {
  image_id   String @id @default(uuid())
  product_id String
  url        String

  product Product @relation(fields: [product_id], references: [product_id])

  @@unique([product_id, url], name: "unique_product_image")
}

model Order {
  order_id String @id @default(uuid())
  user_id  String

  total                    Float
  status                   OrderStatus @default(PENDING)
  shipping_address         String?
  tracking_code            String?
  stripe_session_id        String?     @unique
  stripe_payment_intent_id String?     @unique

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user      User        @relation(fields: [user_id], references: [user_id])
  OrderItem OrderItem[]
  Payment   Payment[]
}

enum OrderStatus {
  PAID
  FAILED
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model OrderItem {
  order_item_id String @id @default(uuid())
  order_id      String
  product_id    String
  quantity      Int

  unit_price Float

  order   Order   @relation(fields: [order_id], references: [order_id])
  product Product @relation(fields: [product_id], references: [product_id])
}

model Cart {
  cart_id    String   @id @default(uuid())
  user_id    String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user     User       @relation(fields: [user_id], references: [user_id])
  CartItem CartItem[]
}

model CartItem {
  cart_item_id String @id @default(uuid())
  cart_id      String
  product_id   String
  quantity     Int

  cart    Cart    @relation(fields: [cart_id], references: [cart_id])
  product Product @relation(fields: [product_id], references: [product_id])
}

model Category {
  category_id String    @id @default(uuid())
  name        String    @unique
  products    Product[] @relation("CategoryProducts")
}

model UserAddress {
  address_id String @id @default(uuid())
  user_id    String
  street     String
  city       String
  state      String
  zip_code   String

  user User @relation(fields: [user_id], references: [user_id])

  @@unique([user_id, street, city, state, zip_code], name: "unique_user_address")
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

model Payment {
  payment_id String        @id @default(uuid())
  order_id   String
  amount     Float
  status     PaymentStatus
  created_at DateTime      @default(now())

  order Order @relation(fields: [order_id], references: [order_id])
}
